{
  "Program" : ["public class Identifier { Main_func } #class_declaration#"],
  "Main_func" : ["public static Variable_declaration ( #params_start# Func_parameters #params_end# ) { Code_block } #function_declaration#"],
  "Func_parameters" : ["Variable_declaration Func_parameters", ", Variable_declaration Func_parameters", "EPSILON"],
  "Code_block" : ["Instruction #instruction# Code_block", "EPSILON"],
  "Instruction" : ["Identifier Instruction_with_identifier ;", "Loop ", "Branch"],
  "Instruction_with_identifier" : ["Func_call", "Assignment", "#type# Array_Type Identifier #declaration# Initialization"],
  "Func_call": [". Identifier #dot# Func_call", "( #args_start# Func_arguments #args_end# ) #function_call#"],
  "Func_arguments": ["Expression Many_func_arguments", "EPSILON"],
  "Many_func_arguments": [", Expression Many_func_arguments", "EPSILON"],
  "Branch" : ["if ( Logical_expression ) { Code_block } #if# Branch_else"],
  "Branch_else" : ["EPSILON", "else Branch_with_else"],
  "Branch_with_else" : ["Branch #else_if#", "{ Code_block } #else#"],
  "Assignment": ["Assignment_operator Expression #expression_assign#", "Unary_operator #unary_expression# #unary_assign#"],
  "Expression": ["Math_expression"],
  "Assignment_operator": ["="],
  "Variable_declaration": ["Identifier #type# Array_Type Identifier #declaration# Initialization"],
  "Initialization": ["= Expression #initialization#", "EPSILON"],
  "Identifier": ["'Identifier' #push#"],
  "Loop" : ["while ( Logical_expression ) { Code_block } #while#", "for ( Variable_declaration ; Logical_expression ; Identifier Assignment ) { Code_block } #for#", 
    "do #do_while_start# { Code_block } while ( Logical_expression ) ; #do_while#"],
  "Logical_expression": ["Math_expression Comparison_operator Math_expression #comparison#"],
  "Math_expression": ["Math_expression_A"],
  "Math_expression_A" : ["Math_expression_C Math_expression_B"],
  "Math_expression_B" : ["EPSILON","+ Math_expression_C Math_expression_B #binary_expression#","- Math_expression_C Math_expression_B #binary_expression#"],
  "Math_expression_C" : ["Math_expression_E Math_expression_D"],
  "Math_expression_D" : ["EPSILON","* Math_expression_E Math_expression_D #binary_expression#","/ Math_expression_E Math_expression_D #binary_expression#"],
  "Math_expression_E" : ["( Math_expression_A )","Value #value_expression#", "Identifier Possible_unary_expression"],
  "Possible_unary_expression" : ["Unary_operator #unary_expression#", "EPSILON #value_expression#"],
  "Unary_operator": ["++", "--"],
  "Binary_operator": ["+", "-", "*", "/"],
  "Comparison_operator": ["==", "!=", "<", ">", ">=", "<="],
  "public" : ["'public' #push#"],
  "class" : ["'class'"],
  "static" : ["'static' #static#"],
  "while" : ["'while'"],
  "do" : ["'do'"],
  "for" : ["'for'"],
  "if" : ["'if'"],
  "else" : ["'else'"],
  "Value" : ["'Value' #push#"],
  "Array_Type" : ["[ ] #array_type#", "EPSILON"],
  "{" : ["'{'"],
  "}" : ["'}'"],
  "[" : ["'['"],
  "]" : ["']'"],
  "(" : ["'('"],
  ")" : ["')'"],
  ";" : ["';'"],
  "=" : ["'='"],
  "==" : ["'==' #push#"],
  "!=" : ["'!=' #push#"],
  "<" : ["'<' #push#"],
  ">" : ["'>' #push#"],
  ">=" : ["'>=' #push#"],
  "<=" : ["'<=' #push#"],
  "++" : ["'++' #push#"],
  "--" : ["'--' #push#"],
  "+" : ["'+' #push#"],
  "-" : ["'-' #push#"],
  "*" : ["'*' #push#"],
  "/" : ["'/' #push#"],
  "." : ["'.'"],
  "," : ["','"]
}